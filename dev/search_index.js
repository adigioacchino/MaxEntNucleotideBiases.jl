var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MaxEntNucleotideBiases","category":"page"},{"location":"#MaxEntNucleotideBiases","page":"Home","title":"MaxEntNucleotideBiases","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MaxEntNucleotideBiases.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MaxEntNucleotideBiases]","category":"page"},{"location":"#MaxEntNucleotideBiases.ComputeEntropy-Tuple{Int64, MaxEntNucleotideBiases.NucleotideModel}","page":"Home","title":"MaxEntNucleotideBiases.ComputeEntropy","text":"ComputeEntropy(L::Int, model::NucleotideModel; fast::Bool=false)\n\nCompute the entropy of the model with parameters model_pars and having length L. The computation exploit the derivatives of the partition function, that can be approximated to make it faster (using fast=true), although it should be very quick in any case.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.ComputeLoglikelihood-Tuple{String, MaxEntNucleotideBiases.NucleotideModel}","page":"Home","title":"MaxEntNucleotideBiases.ComputeLoglikelihood","text":"ComputeLoglikelihood(seq::String, model::NucleotideModel; logZ=missing)\n\nGiven a sequence seq and the model parameters model_pars, compute the log-likelihood (energy minus log of Z) of this sequence. logZ can be passed directly if pre-computed, otherwise is it computed each time this function is called.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.ComputeMinusEnergy-Tuple{AbstractString, MaxEntNucleotideBiases.NucleotideModel}","page":"Home","title":"MaxEntNucleotideBiases.ComputeMinusEnergy","text":"ComputeMinusEnergy(seq::String, model::NucleotideModel)\n\nGiven a sequence seq and the model parameters model_pars,  compute (minus) the energy of this sequence.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.ComputePressure-Tuple{Int64, MaxEntNucleotideBiases.NucleotideModel}","page":"Home","title":"MaxEntNucleotideBiases.ComputePressure","text":"ComputePressure(L::Int, model::NucleotideModel; fast::Bool=false)\n\nThe pressure on a genome can be quantified as how the genome is different from a random uniform one. Therefore, this function compute the difference in the entropy of a random uniform model and the model described with model_pars, with lenght L, rescaled with the entropy of the uniform model. Setting fast=true allows for a quicker estimation of the entropy of the model (it can be useful for extremely large sequences).\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.ComputeSymmetrizedKL-Tuple{Int64, MaxEntNucleotideBiases.NucleotideModel, MaxEntNucleotideBiases.NucleotideModel}","page":"Home","title":"MaxEntNucleotideBiases.ComputeSymmetrizedKL","text":"ComputeSymmetrizedKL(L::Int, model1::NucleotideModel, \n                    model2::NucleotideModel; fast::Bool=false)\n\nCompute the symmetrized version of the Kullback-Leibler divergence between the distributions defined by model1_pars and model2_pars. Setting fast=true allows for a quicker estimation  of the KL divergence (it can be useful for extremely large sequences).\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.EvalLogZ-Tuple{MaxEntNucleotideBiases.NucleotideModel, Int64}","page":"Home","title":"MaxEntNucleotideBiases.EvalLogZ","text":"EvalLogZ(model::NucleotideModel, L::Int)\n\nCompute the partition function of a model of length L through the transfer matrix method.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.EvalLogZFast-Tuple{MaxEntNucleotideBiases.NucleotideModel, Int64}","page":"Home","title":"MaxEntNucleotideBiases.EvalLogZFast","text":"EvalLogZFast(model::NucleotideModel, L::Int)\n\nCompute the partition function of a model of length L by taking the real part of the largest eigenvalue of the transfer matrix.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.ForcesDict-Tuple{MaxEntNucleotideBiases.NucleotideModel}","page":"Home","title":"MaxEntNucleotideBiases.ForcesDict","text":"ForcesDict(model::NucleotideModel)\n\nReturn a dictionary of the form motif => force.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.GaugeMaskVariables-Tuple{Vector{String}}","page":"Home","title":"MaxEntNucleotideBiases.GaugeMaskVariables","text":"GaugeMaskVariables(motifs::Vector{String})\n\nThis function returns a Array{Bool} corresponding to motifs that have to be inferred after all motifs containing Ts are fixed to 0 thanks to gauge transformations.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.GenerateTM-Tuple{MaxEntNucleotideBiases.NucleotideModel}","page":"Home","title":"MaxEntNucleotideBiases.GenerateTM","text":"GenerateTM(model::NucleotideModel)\n\nReturn the trasfer matrix used for the computation of the partition function. The first index correspond to the left-most nucleotide, the last index to the right-most one.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.GenerateTMLast-Tuple{MaxEntNucleotideBiases.NucleotideModel}","page":"Home","title":"MaxEntNucleotideBiases.GenerateTMLast","text":"GenerateTMLast(model::NucleotideModel)\n\nReturn the last transfer matrix used for the computation of the partition function. The first index correspond to the left-most nucleotide, the last index to the right-most one.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.MetropolisSampling-Tuple{Int64, MaxEntNucleotideBiases.NucleotideModel}","page":"Home","title":"MaxEntNucleotideBiases.MetropolisSampling","text":"MetropolisSampling(L::Int, model::NucleotideModel; \n                         beta::Float64=1.0, Nsamples::Int=1, Nsteps::Int=1, Ntherm::Int=L*10, \n                         startseq::Union{String,Missing}=missing)\n\nSample Nsample sequences of length L at inverse temperature beta using a model given in model.  Ntherm is the number of MonteCarlo steps done before starting collecting sequences,  startseq is the starting sequence.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.ModelFit","page":"Home","title":"MaxEntNucleotideBiases.ModelFit","text":"ModelFit(seqs::Union{Vector{String}, String}, Lmotifs::Int, Lmodel::Union{Int,Missing}=missing; \n              add_pseudocount::Bool=false, tolerance::Float64=0.01, max_iter::Int=100, \n              verbose::Bool=false, fast::Union{Bool,String}=\"auto\", ZS_gauge::Bool=true)\n\nFit the model parameters, which are:\n\nonly 1-point functions (fields) if Lmotifs==1;\n1-point and 2-point functions (fields, 2-mer forces) if Lmotifs==2;\n1-point, 2-point and 3-point functions (fields, 2-mer and 3-mer forces) if Lmotifs==3.\n\nLmodel is the number of nucleotides used for the inference. If seqs is made of  sequences of constant length (or if it is String and not a vector), the default option will use the sequences length as Lmodel; otherwise, the default behaviour is to take Lmodel = 5000.\n\nIf add_pseudocount, a single pseudocount is added for each observed number of nucleotides and dinucleotides.\n\nIf fast, the partition function is estimated through the top eigenvalue of the transfer matrix alone (much faster, but slightly less precise, expecially for short sequences). The default value, \"auto\", automatically uses the fast  evaluation for long sequences.\n\ntolerance and max_iter are parameters for the Newton-Raphson algorithm  used to solve the system of equations.\n\nZS_gauge specifies whether the result has to be put in the zero sum gauge before being returned.\n\n\n\n\n\n","category":"function"},{"location":"#MaxEntNucleotideBiases.ZerosumGauge-Tuple{MaxEntNucleotideBiases.NucleotideModel}","page":"Home","title":"MaxEntNucleotideBiases.ZerosumGauge","text":"ZerosumGauge(model_pars::NucleotideModel)\n\nThis function takes as input a dictionary describing the parmeters of a model and changes the gauge into the \"zero-sum\" gauge.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases._ComputeNObs-Tuple{Vector{String}, Vector{String}, Int64}","page":"Home","title":"MaxEntNucleotideBiases._ComputeNObs","text":"_ComputeNObs(seqs::Vector{String}, independent_motifs::Vector{String}, L::Int)\n\nFor each motif in independent_motifs, compute the number of observed motifs in each sequence in seqs, then divide by the sequence length, take the average of these intensive fractions over the sequences, and multiply by the model length L.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases._MCStep!-Tuple{Int64, Int64, Vector{String}, MaxEntNucleotideBiases.NucleotideModel, Float64}","page":"Home","title":"MaxEntNucleotideBiases._MCStep!","text":"_MCStep!(L::Int, mlk::Int, curr_seq::Vector{String}, \n              model::NucleotideModel, \n              beta::Float64)\n\nPerforms a MonteCarlo step; L is currseq length, mlk is the maximum length of the motifs considered, currseq is the starting sequence, model specifies the model,  and beta is the inverse temperature.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases._PreprocessSeqs-Tuple{Vector{String}}","page":"Home","title":"MaxEntNucleotideBiases._PreprocessSeqs","text":"_PreprocessSeqs(seqs_in::Vector{String})\n\nPre-process the vector of sequences seqs_in, so that sequences only contains letters A, C, G, T. The pre-processed sequence vector is the returned.\n\n\n\n\n\n","category":"method"}]
}
