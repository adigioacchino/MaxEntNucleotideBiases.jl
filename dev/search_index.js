var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MaxEntNucleotideBiases","category":"page"},{"location":"#MaxEntNucleotideBiases","page":"Home","title":"MaxEntNucleotideBiases","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MaxEntNucleotideBiases.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MaxEntNucleotideBiases]","category":"page"},{"location":"#MaxEntNucleotideBiases.ComputeEntropy-Tuple{Int64, Dict{String, Float64}}","page":"Home","title":"MaxEntNucleotideBiases.ComputeEntropy","text":"ComputeEntropy(L::Int, model_pars::Dict{String, Float64}; fast::Bool=false)\n\nCompute the entropy of the model with parameters model_pars and having length L. The computation exploit the derivatives of the partition function, that can be approximated to make it faster (using fast=true), although it should be very quick in any case.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.ComputeLoglikelihood-Tuple{String, Dict{String, Float64}}","page":"Home","title":"MaxEntNucleotideBiases.ComputeLoglikelihood","text":"ComputeLoglikelihood(seq::String, model_pars::Dict{String, Float64}; logZ=missing)\n\nGiven a sequence seq and the model parameters model_pars, compute the log-likelihood (energy minus log of Z) of this sequence. logZ can be passed directly if pre-computed, otherwise is it computed each time this function is called.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.ComputeMinusEnergy-Tuple{String, Dict{String, Float64}}","page":"Home","title":"MaxEntNucleotideBiases.ComputeMinusEnergy","text":"ComputeMinusEnergy(seq::String, model_pars::Dict{String, Float64})\n\nGiven a sequence seq and the model parameters model_pars,  compute (minus) the energy of this sequence.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.ComputeMinusEnergyLmodel3-Tuple{String, Dict{String, Float64}}","page":"Home","title":"MaxEntNucleotideBiases.ComputeMinusEnergyLmodel3","text":"ComputeMinusEnergyLmodel3(seq::String, model_pars::Dict{String, Float64})\n\nGiven a sequence seq and the model parameters model_pars,  compute (minus) the energy of this sequence. It only works for  motifs of length 3, and it is slightly faster than ComputeMinusEnergy.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.ComputePressure-Tuple{Int64, Dict{String, Float64}}","page":"Home","title":"MaxEntNucleotideBiases.ComputePressure","text":"ComputePressure(L::Int, model_pars::Dict{String, Float64}; fast::Bool=false)\n\nThe pressure on a genome can be quantified as how the genome is different from a random uniform one. Therefore, this function compute the difference in the entropy of a random uniform model and the model described with model_pars, with lenght L, rescaled with the entropy of the uniform model. Setting fast=true allows for a quicker estimation of the entropy of the model (it can be useful for extremely large sequences).\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.ComputeSymmetrizedKL-Tuple{Int64, Dict{String, Float64}, Dict{String, Float64}}","page":"Home","title":"MaxEntNucleotideBiases.ComputeSymmetrizedKL","text":"ComputeSymmetrizedKL(L::Int, model1_pars::Dict{String, Float64}, \n                       model2_pars::Dict{String, Float64}; fast::Bool=false)\n\nCompute the symmetrized version of the Kullback-Leibler divergence between the distributions defined by model1_pars and model2_pars. Setting fast=true allows for a quicker estimation  of the KL divergence (it can be useful for extremely large sequences).\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.EvalLogZ-Tuple{Dict{String, Float64}, Int64}","page":"Home","title":"MaxEntNucleotideBiases.EvalLogZ","text":"EvalLogZ(model_pars::Dict{String, Float64}, L::Int)\n\nCompute the partition function of a model of length L through the transfer matrix method. model_pars is a dict of motif => parameter in the Hamiltonian.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.EvalLogZFast-Tuple{Dict{String, Float64}, Int64}","page":"Home","title":"MaxEntNucleotideBiases.EvalLogZFast","text":"EvalLogZFast(model_pars::Dict{String, Float64}, L::Int)\n\nCompute the partition function of a model of length L by taking the real part of the largest eigenvalue of the transfer matrix. model_pars is a dict of  motif => parameter in the Hamiltonian.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.GaugeMaskVariables-Tuple{Vector{String}}","page":"Home","title":"MaxEntNucleotideBiases.GaugeMaskVariables","text":"GaugeMaskVariables(motifs::Vector{String})\n\nThis function returns a Array{Bool} corresponding to motifs that have to be inferred after all motifs containing Ts are fixed to 0 thanks to gauge transformations.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.GenerateTM-Tuple{Dict{String, Float64}}","page":"Home","title":"MaxEntNucleotideBiases.GenerateTM","text":"GenerateTM(model_pars::Dict{String, Float64})\n\nReturn the trasfer matrix used for the computation of the partition function. The first index correspond to the left-most nucleotide, the last index to the right-most one.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.GenerateTMLast-Tuple{Dict{String, Float64}}","page":"Home","title":"MaxEntNucleotideBiases.GenerateTMLast","text":"GenerateTMLast(model_pars::Dict{String, Float64})\n\nReturn the last transfer matrix used for the computation of the partition function. The first index correspond to the left-most nucleotide, the last index to the right-most one.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.MetropolisSampling-Tuple{Int64, Dict{String, Float64}}","page":"Home","title":"MaxEntNucleotideBiases.MetropolisSampling","text":"MetropolisSampling(L::Int, model_pars::Dict{String, Float64}; \n                    beta::Float64=1.0, Nsamples::Int=1, Nsteps::Int=1, Ntherm::Int=L*10, \n                    startseq=missing)\n\nSample Nsample sequences of length L at inverse temperature beta using a model defined by the model parameters given in model_pars (dict of motifs => floats). Ntherm is the number of  MonteCarlo steps done before starting collecting sequences, startseq is the starting sequence.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases.ModelFit","page":"Home","title":"MaxEntNucleotideBiases.ModelFit","text":"ModelFit(seqs::Vector{String}, Lmotifs::Int, Lmodel::Union{Int,Missing}=missing; \n         add_pseudocount::Bool=false, tolerance::Float64=0.01, max_iter::Int=100, \n         verbose::Bool=true)\nModelFit(seq::String, Lmotifs::Int, Lmodel::Union{Int,Missing}=missing; \n         add_pseudocount::Bool=false, tolerance::Float64=0.01, max_iter::Int=100, \n         verbose::Bool=true)\n\nFit the model parameters, which are:\n\nonly 1-point functions (fields) if Lmotifs==1;\n1-point and 2-point functions (fields, 2-mer forces) if Lmotifs==2;\n1-point, 2-point and 3-point functions (fields, 2-mer and 3-mer forces) if Lmotifs==3.\n\nLmodel is the number of nucleotides used for the inference. If seqs is made of  sequences of constant length (or if it is String and not a vector), the default option will use the sequences length as Lmodel; otherwise, the default behaviour is to take Lmodel = 5000.\n\nIf add_pseudocount, a single pseudocount is added for each observed number of nucleotides and dinucleotides.\n\nIf fast, the partition function is estimated through the top eigenvalue of the transfer matrix alone (much faster, but slightly less precise, expecially for short sequences).\n\nFinally, tolerance and max_iter are parameters for the Newton-Raphson algorithm  used to solve the system of equations.\n\n\n\n\n\n","category":"function"},{"location":"#MaxEntNucleotideBiases.ZerosumGauge-Tuple{Dict{String, Float64}}","page":"Home","title":"MaxEntNucleotideBiases.ZerosumGauge","text":"ZerosumGauge(model_pars::Dict{String, Float64})\n\nThis function takes as input a dictionary describing the parmeters of a model and changes the gauge so that one and two point parameters are \"zero-sum\". It does not modify three point parameters.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases._ComputeNObs-Tuple{Vector{String}, Vector{String}, Int64}","page":"Home","title":"MaxEntNucleotideBiases._ComputeNObs","text":"_ComputeNObs(seqs::Vector{String}, independent_motifs::Vector{String}, L::Int)\n\nFor each motif in independent_motifs, compute the number of observed motifs in each sequence in seqs, then divide by the sequence length, take the average of these intensive fractions over the sequences, and multiply by the model length L.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases._MCStep!-Tuple{Int64, Int64, Vector{String}, Dict{String, Float64}, Float64}","page":"Home","title":"MaxEntNucleotideBiases._MCStep!","text":"_MCStep!(L::Int, mlk::Int, curr_seq::Vector{String}, \n          model_pars::Dict{String, Float64}, \n          beta::Float64)\n\nPerforms a MonteCarlo step; L is currseq length, mlk is the maximum length of the motifs considered, currseq is the starting sequence, model_pars are the model  parameters (dict of motifs => floats), and beta is the inverse temperature.\n\n\n\n\n\n","category":"method"},{"location":"#MaxEntNucleotideBiases._PreprocessSeqs-Tuple{Vector{String}}","page":"Home","title":"MaxEntNucleotideBiases._PreprocessSeqs","text":"_PreprocessSeqs(seqs_in::Vector{String})\n\nPre-process the vector of sequences seqs_in, so that sequences only contains letters A, C, G, T. The pre-processed sequence vector is the returned.\n\n\n\n\n\n","category":"method"}]
}
